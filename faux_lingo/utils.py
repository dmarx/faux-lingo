def compute_perplexity_from_entropy(entropy):
    """
    Given an entropy value (in bits), compute the perplexity.
    """
    return 2 ** entropy

def analyze_transition_matrix_with_perplexity(T, vocab_size, tokens_per_word):
    """
    Compute a set of entropy measures for a given transition matrix T
    and then infer perplexity.
    
    Returns a dictionary containing:
      - max_entropy: log2(vocab_size) [bits/word]
      - stationary_entropy: entropy of the stationary distribution [bits/word]
      - conditional_entropy: average conditional entropy (weighted row entropies) [bits/word]
      - per_token_stationary: stationary entropy per token
      - per_token_conditional: conditional entropy per token
      - perplexity_stationary: 2^(stationary_entropy)
      - perplexity_conditional: 2^(conditional_entropy)
    """
    analysis = analyze_transition_matrix(T, vocab_size, tokens_per_word)
    perplexity_stationary = compute_perplexity_from_entropy(analysis["stationary_entropy"])
    perplexity_conditional = compute_perplexity_from_entropy(analysis["conditional_entropy"])
    
    analysis.update({
        "perplexity_stationary": perplexity_stationary,
        "perplexity_conditional": perplexity_conditional
    })
    return analysis

# Example usage within our main analysis routine:
def main_perplexity_example():
    # (Use the same parameters as before)
    vocab_size = 100      # Total number of words
    avg_degree = 5        # Number of transitions per word
    tokens_per_word = 9   # e.g., 3 characters * 3 runes * 1 token per rune

    # We'll assume T_background has been generated by our earlier function.
    # For demonstration, generate a dummy T_background:
    word_colors = {i: random.randint(0, 4) for i in range(vocab_size)}
    T_background = sample_sparse_transition_matrix_with_colors(vocab_size, avg_degree, word_colors, seed=42)
    
    analysis = analyze_transition_matrix_with_perplexity(T_background, vocab_size, tokens_per_word)
    
    print("=== Transition Matrix Analysis with Perplexity ===")
    print(f"Max entropy (uniform): {analysis['max_entropy']:.3f} bits/word")
    print(f"Stationary entropy: {analysis['stationary_entropy']:.3f} bits/word")
    print(f"Conditional entropy: {analysis['conditional_entropy']:.3f} bits/word")
    print(f"Per-token stationary entropy: {analysis['per_token_stationary']:.3f} bits/token")
    print(f"Per-token conditional entropy: {analysis['per_token_conditional']:.3f} bits/token")
    print(f"Perplexity (stationary): {analysis['perplexity_stationary']:.3f}")
    print(f"Perplexity (conditional): {analysis['perplexity_conditional']:.3f}")

if __name__ == "__main__":
    main_perplexity_example()
